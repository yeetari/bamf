#pragma once

#include <bamf/x86/Register.hh>

#include <cstdint>

namespace bamf::x86 {

class Decoder;

// Opcode generated by final decoder, not actually x86 opcodes
enum class Opcode {
    Call,
    Lea,
    MovRegImm,
    MovRegReg,
    PopReg,
    PushReg,
    Ret,
    Xor,
};

class MachineInst {
    friend Decoder;

private:
    std::uintptr_t m_offset;

    Opcode m_opcode;
    Register m_dst;
    Register m_src;
    std::size_t m_imm;

    int m_address_bit_width;
    int m_operand_bit_width;

    std::uint8_t m_sib_scale;
    Register m_sib_index;
    Register m_sib_base;

public:
    void dump();

    Opcode opcode() const { return m_opcode; }
    Register dst() const { return m_dst; }
    Register src() const { return m_src; }
    std::size_t imm() const { return m_imm; }

    int address_bit_width() const { return m_address_bit_width; }
    int operand_bit_width() const { return m_operand_bit_width; }

    std::uint8_t sib_scale() const { return m_sib_scale; }
    Register sib_index() const { return m_sib_index; }
    Register sib_base() const { return m_sib_base; }
};

} // namespace bamf::x86
